{
  "title": "Vitest로 테스트 코드 작성하기!",
  "date": "2024-07-14",
  "description": "vitest와 테스트 코드",
  "tag": "TDD",
  "body": {
    "raw": "\n## Vitest로 테스트 코드 작성하기\n\n### 왜 테스트 코드를 작성해야할까?\n\n사실 테스트 코드를 작성하기 전에는, 테스트 코드의 필요를 크게 느끼지 못했습니다. 개발하면서 QA를 하면 모든 예외상황을 체크할 수 있을 것이라고 안일하게 생각했습니다. 또한 `귀찮음`과 `촉박한 개발 일정`이라는 이유로 외면했었습니다.\n<br/>\n하지만 실제 프로덕션에 나간 코드가 예상치 못한 버그가 발생하고 코드에 대한 신뢰가 떨어지면서 테스트 코드의 필요성을 느끼게 되었습니다.\n<br/>\n소프트웨어 개발 방법론 중 하나인 `TDD(테스트 주도 개발)`에는 우선적으로 테스트 코드를 작성하고 기능을 만들라고 되어있습니다.\n<br/>\n실제로 A 기능에 대한 코드와 A 기능 테스트 코드를 작성하게 되면 2배로 코드를 작성하는 시간이 드는건 맞지만, 실제 테스트 시간, 나중에 버그로 인한 사이드 이펙트를 해결할 시간을 생각하면 어쩌면 시간을 더 절약할 수 있습니다.\n<br/>\n또한 만약 다른 팀원이 작업한 코드를 복잡한 코드를 볼 때, 테스트 코드를 따라가다보면, 팀원이 작성한 코드의 기능을 파악하기 용이합니다.\n이제 테스트 코드를 작성해야하는 이유를 알게 됐으니, 어떤 도구를 써야할까요?\n\n### Vitest vs Jest\n\n- 성능: Vitest는 Vite의 빠른 빌드 속도와 HMR 기능을 활용하여 Jest보다 빠른 테스트 실행 속도를 제공합니다.\n\n- 설정의 용이성: Vitest는 Vite와 자연스럽게 통합되어 설정이 간단하고 직관적입니다.\n\n- 호환성: Vitest는 Jest와 유사한 API를 제공하여 기존 Jest 사용자가 쉽게 전환할 수 있습니다.\n\n### 왜 Vitest?\n\n- 빠른 개발 환경: Vite의 성능을 활용하여 매우 빠른 테스트 실행 속도를 제공합니다. 이는 개발자가 코드를 수정하고 테스트하는 과정에서 시간을 절약할 수 있게 합니다.\n\n- 핫 모듈 리플레이스먼트 (HMR): Vite의 HMR 기능을 통해 코드 변경 시 테스트 결과를 즉시 확인할 수 있어 개발 피드백 루프가 짧아집니다.\n\n- 간편한 설정: Vitest는 Vite 프로젝트와 자연스럽게 통합되어 설정이 간단하고 직관적입니다. 이는 설정 작업에 소요되는 시간을 줄이고, 더 많은 시간을 실제 개발에 집중할 수 있게 합니다.\n\n- 모던 프레임워크와의 호환성: Vitest는 TypeScript, JSX, Vue, React 등 최신 프레임워크 및 라이브러리와의 호환성이 뛰어나, 모던 웹 개발 환경에 적합합니다.\n\n- Jest와 유사한 API: Vitest는 Jest와 매우 유사한 API를 제공하여, 기존 Jest 사용자들이 쉽게 전환할 수 있습니다. 이는 학습 곡선을 낮추고, 빠르게 Vitest를 도입할 수 있게 합니다\n\n### vitest로 테스트 코드 작성하기\n\n#### 기본적인 테스트 작성법\n\n```js\nimport { describe, it, expect } from 'vitest';\n\ndescribe('더하기 함수 테스트', () => {\n  it('두 숫자를 덧셈합니다', () => {\n    const sum = (a, b) => a + b;\n    expect(sum(1, 2)).toBe(3);\n  });\n});\n```\n\n#### 비동기 코드 테스트\n\n```js\nimport { describe, it, expect } from 'vitest';\n\ndescribe('API 응답 테스트', () => {\n  it('데이터를 받아온다', async () => {\n    const fetchData = () => Promise.resolve('data');\n    const data = await fetchData();\n    expect(data).toBe('data');\n  });\n});\n```\n\n#### React 컴포넌트 테스트코드\n\n```js\n// Counter.jsx\nimport React, { useState } from 'react';\n\nfunction Counter() {\n  const [count, setCount] = useState(0);\n\n  return (\n    <div>\n      <p data-testid=\"count\">{count}</p>\n      <button onClick={() => setCount(count + 1)}>Increment</button>\n      <button onClick={() => setCount(count - 1)}>Decrement</button>\n    </div>\n  );\n}\nexport default Counter;\n```\n\n```js\nimport { render, screen, fireEvent } from '@testing-library/react';\nimport { describe, it, expect } from 'vitest';\nimport Counter from './Counter';\n\ndescribe('Counter Component', () => {\n  it('초기 카운트를 렌더링한다', () => {\n    render(<Counter />);\n    const countElement = screen.getByTestId('count');\n    expect(countElement.textContent).toBe('0');\n  });\n\n  it('카운트를 증가시킨다', () => {\n    render(<Counter />);\n    const countElement = screen.getByTestId('count');\n    const incrementButton = screen.getByText('Increment');\n\n    fireEvent.click(incrementButton);\n    expect(countElement.textContent).toBe('1');\n  });\n\n  it('카운트를 감소시킨다', () => {\n    render(<Counter />);\n    const countElement = screen.getByTestId('count');\n    const decrementButton = screen.getByText('Decrement');\n\n    fireEvent.click(decrementButton);\n    expect(countElement.textContent).toBe('-1');\n  });\n});\n```\n\n#### 테스트 코드 작성 팁\n\n**재사용 가능한 테스트 유틸리티 함수**\n\n반복적인 테스트 코드를 줄이기 위해 유틸리티 함수를 작성합니다.\n\n```js\nexport const complexCalculation = (a, b) => {\n  return (a * b) / (a - b);\n};\n\ndescribe('복잡한 계산', () => {\n  it('정상 작동 테스트', () => {\n    const result = complexCalculation(10, 5);\n    expect(result).toBeCloseTo(2.5);\n  });\n\n  it('0으로 나누기를 처리합니다.', () => {\n    const result = complexCalculation(5, 5);\n    expect(result).toBeNaN();\n  });\n});\n```\n\n**Mock을 활용한 테스트 코드**\n\n```js\n/**\n * 목 데이터 Fetch 함수\n * */\nexport const mockFetch = (url, options = {}) => {\n  const { method = 'GET', response, status = 200, headers = {} } = options;\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve({\n        ok: true,\n        status,\n        json: async () => response,\n        headers: new Headers(headers),\n      });\n    }, 100);\n  });\n};\n\nglobal.fetch = vi.fn().mockImplementation(mockFetch);\n\ndescribe('API 응답 테스트', () => {\n  it('FETCH 성공', async () => {\n    const mockResponse = { data: 'test' };\n    fetch.mockImplementationOnce(() => mockFetch('/api/data', { response: mockResponse }));\n\n    const response = await fetch('/api/data');\n    const data = await response.json();\n\n    expect(data).toEqual(mockResponse);\n    expect(response.ok).toBe(true);\n  });\n});\n```\n\n### Tanstack query 데이터 Fetch 테스트 코드\n\n```js\n// DataComponent.jsx\nimport React from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport axios from 'axios';\n\nconst fetchData = async () => {\n  const { data } = await axios.get('/api/data');\n  return data;\n};\n\nconst updateData = async (newData) => {\n  const { data } = await axios.put('/api/data', newData);\n  return data;\n};\n\nfunction DataComponent() {\n  const queryClient = useQueryClient();\n\n  const { data, error, isLoading } = useQuery(['data'], fetchData);\n\n  const mutation = useMutation(updateData, {\n    onSuccess: () => {\n      queryClient.invalidateQueries(['data']);\n    },\n  });\n\n  if (isLoading) return <div>Loading...</div>;\n  if (error) return <div>Error: {error.message}</div>;\n\n  return (\n    <div>\n      <h1>Data</h1>\n      <pre>{JSON.stringify(data, null, 2)}</pre>\n      <button onClick={() => mutation.mutate({ newData: 'Updated data' })}>Update Data</button>\n    </div>\n  );\n}\n\nexport default DataComponent;\n```\n\n```js\n// DataComponent.test.jsx\nimport { render, screen, waitFor, fireEvent } from '@testing-library/react';\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\nimport { describe, it, expect, vi } from 'vitest';\nimport axios from 'axios';\nimport DataComponent from './DataComponent';\n\n// axios Mock 설정\nvi.mock('axios');\n\n// mock 데이터\nconst mockData = { data: 'test data' };\nconst updatedData = { data: 'Updated data' };\n\nconst queryClient = new QueryClient();\n\ndescribe('DataComponent', () => {\n  it('데이터를 가져와서 화면에 표시한다', async () => {\n    axios.get.mockResolvedValueOnce({ data: mockData });\n    // mockResolvedValueOnce란 mock 함수가 한 번 호출될 때 지정된 값을 반환하도록 설정하는 메서드\n    render(\n      <QueryClientProvider client={queryClient}>\n        <DataComponent />\n      </QueryClientProvider>,\n    );\n\n    expect(screen.getByText('Loading...')).toBeInTheDocument();\n\n    await waitFor(() => expect(screen.getByText(/test data/i)).toBeInTheDocument());\n  });\n\n  it('버튼 클릭 시 데이터를 업데이트한다', async () => {\n    axios.get.mockResolvedValueOnce({ data: mockData });\n    axios.put.mockResolvedValueOnce({ data: updatedData });\n\n    render(\n      <QueryClientProvider client={queryClient}>\n        <DataComponent />\n      </QueryClientProvider>,\n    );\n\n    await waitFor(() => expect(screen.getByText(/test data/i)).toBeInTheDocument());\n\n    fireEvent.click(screen.getByText(/Update Data/i));\n\n    await waitFor(() => expect(screen.getByText(/Updated data/i)).toBeInTheDocument());\n  });\n});\n```\n\n### 코드 설명\n\n#### mock 설정\n\n```js\n// axios Mock 설정\nvi.mock('axios');\n\n// mock 데이터\nconst mockData = { data: 'test data' };\nconst updatedData = { data: 'Updated data' };\n\nconst queryClient = new QueryClient();\n```\n\n> vi.mock('axios'): axios 모듈을 모의(mock)하여 실제 네트워크 요청을 방지합니다. <br/>\n> mockData와 updatedData: 테스트에 사용할 모의 데이터입니다. 첫 번째는 초기 데이터, 두 번째는 업데이트된 데이터입니다. <br/>\n> queryClient: react-query를 사용하는 컴포넌트에 필요한 QueryClient 인스턴스를 생성합니다.\n\n#### 데이터 가져오기\n\n```js\nit('데이터를 가져와서 화면에 표시한다', async () => {\n  axios.get.mockResolvedValueOnce({ data: mockData });\n  // mockResolvedValueOnce란 mock 함수가 한 번 호출될 때 지정된 값을 반환하도록 설정하는 메서드\n  render(\n    <QueryClientProvider client={queryClient}>\n      <DataComponent />\n    </QueryClientProvider>,\n  );\n\n  expect(screen.getByText('Loading...')).toBeInTheDocument();\n\n  await waitFor(() => expect(screen.getByText(/test data/i)).toBeInTheDocument());\n});\n```\n\n> 로딩 상태 확인:\n> expect(screen.getByText('Loading...')).toBeInTheDocument(): 컴포넌트가 로딩 중일 때 \"Loading...\" 텍스트가 화면에 표시되는지 확인합니다. <br/> <br/>\n> 데이터 확인: await waitFor(() => expect(screen.getByText(/test data/i)).toBeInTheDocument()): 데이터를 성공적으로 가져왔을 때, mockData의 내용인 \"test data\"가 화면에 표시되는지 확인합니다.\n\n#### 데이터 업데이트\n\n```js\nit('버튼 클릭 시 데이터를 업데이트한다', async () => {\n  axios.get.mockResolvedValueOnce({ data: mockData });\n  axios.put.mockResolvedValueOnce({ data: updatedData });\n\n  render(\n    <QueryClientProvider client={queryClient}>\n      <DataComponent />\n    </QueryClientProvider>,\n  );\n\n  await waitFor(() => expect(screen.getByText(/test data/i)).toBeInTheDocument());\n\n  fireEvent.click(screen.getByText(/Update Data/i));\n\n  await waitFor(() => expect(screen.getByText(/Updated data/i)).toBeInTheDocument());\n});\n```\n\n> 초기 데이터 확인:\n> await waitFor(() => expect(screen.getByText(/test data/i)).toBeInTheDocument()): mockData의 내용인 \"test data\"가 화면에 표시되는지 확인합니다. <br/><br/>\n> 데이터 업데이트:\n> fireEvent.click(screen.getByText(/Update Data/i)): \"Update Data\" 버튼을 클릭하여 데이터를 업데이트하는 이벤트를 발생시킵니다.<br/><br/>\n> 업데이트된 데이터 확인:\n> await waitFor(() => expect(screen.getByText(/Updated data/i)).toBeInTheDocument()): 데이터가 성공적으로 업데이트되었을 때, updatedData의 내용인 \"Updated data\"가 화면에 표시되는지 확인합니다.<br/><br/>\n",
    "code": "var Component=(()=>{var u=Object.create;var c=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var h=Object.getPrototypeOf,x=Object.prototype.hasOwnProperty;var g=(t,n)=>()=>(n||t((n={exports:{}}).exports,n),n.exports),y=(t,n)=>{for(var a in n)c(t,a,{get:n[a],enumerable:!0})},i=(t,n,a,o)=>{if(n&&typeof n==\"object\"||typeof n==\"function\")for(let r of m(n))!x.call(t,r)&&r!==a&&c(t,r,{get:()=>n[r],enumerable:!(o=p(n,r))||o.enumerable});return t};var D=(t,n,a)=>(a=t!=null?u(h(t)):{},i(n||!t||!t.__esModule?c(a,\"default\",{value:t,enumerable:!0}):a,t)),C=t=>i(c({},\"__esModule\",{value:!0}),t);var d=g((T,s)=>{s.exports=_jsx_runtime});var B={};y(B,{default:()=>b,frontmatter:()=>k});var e=D(d()),k={title:\"Vitest\\uB85C \\uD14C\\uC2A4\\uD2B8 \\uCF54\\uB4DC \\uC791\\uC131\\uD558\\uAE30!\",date:new Date(17209152e5),description:\"vitest\\uC640 \\uD14C\\uC2A4\\uD2B8 \\uCF54\\uB4DC\",tag:\"TDD\"};function l(t){let n=Object.assign({h2:\"h2\",h3:\"h3\",p:\"p\",code:\"code\",ul:\"ul\",li:\"li\",h4:\"h4\",pre:\"pre\",strong:\"strong\",blockquote:\"blockquote\"},t.components);return(0,e.jsxs)(e.Fragment,{children:[(0,e.jsx)(n.h2,{children:\"Vitest\\uB85C \\uD14C\\uC2A4\\uD2B8 \\uCF54\\uB4DC \\uC791\\uC131\\uD558\\uAE30\"}),`\n`,(0,e.jsx)(n.h3,{children:\"\\uC65C \\uD14C\\uC2A4\\uD2B8 \\uCF54\\uB4DC\\uB97C \\uC791\\uC131\\uD574\\uC57C\\uD560\\uAE4C?\"}),`\n`,(0,e.jsxs)(n.p,{children:[\"\\uC0AC\\uC2E4 \\uD14C\\uC2A4\\uD2B8 \\uCF54\\uB4DC\\uB97C \\uC791\\uC131\\uD558\\uAE30 \\uC804\\uC5D0\\uB294, \\uD14C\\uC2A4\\uD2B8 \\uCF54\\uB4DC\\uC758 \\uD544\\uC694\\uB97C \\uD06C\\uAC8C \\uB290\\uB07C\\uC9C0 \\uBABB\\uD588\\uC2B5\\uB2C8\\uB2E4. \\uAC1C\\uBC1C\\uD558\\uBA74\\uC11C QA\\uB97C \\uD558\\uBA74 \\uBAA8\\uB4E0 \\uC608\\uC678\\uC0C1\\uD669\\uC744 \\uCCB4\\uD06C\\uD560 \\uC218 \\uC788\\uC744 \\uAC83\\uC774\\uB77C\\uACE0 \\uC548\\uC77C\\uD558\\uAC8C \\uC0DD\\uAC01\\uD588\\uC2B5\\uB2C8\\uB2E4. \\uB610\\uD55C \",(0,e.jsx)(n.code,{children:\"\\uADC0\\uCC2E\\uC74C\"}),\"\\uACFC \",(0,e.jsx)(n.code,{children:\"\\uCD09\\uBC15\\uD55C \\uAC1C\\uBC1C \\uC77C\\uC815\"}),\"\\uC774\\uB77C\\uB294 \\uC774\\uC720\\uB85C \\uC678\\uBA74\\uD588\\uC5C8\\uC2B5\\uB2C8\\uB2E4.\"]}),`\n`,(0,e.jsx)(\"br\",{}),`\n`,(0,e.jsx)(n.p,{children:\"\\uD558\\uC9C0\\uB9CC \\uC2E4\\uC81C \\uD504\\uB85C\\uB355\\uC158\\uC5D0 \\uB098\\uAC04 \\uCF54\\uB4DC\\uAC00 \\uC608\\uC0C1\\uCE58 \\uBABB\\uD55C \\uBC84\\uADF8\\uAC00 \\uBC1C\\uC0DD\\uD558\\uACE0 \\uCF54\\uB4DC\\uC5D0 \\uB300\\uD55C \\uC2E0\\uB8B0\\uAC00 \\uB5A8\\uC5B4\\uC9C0\\uBA74\\uC11C \\uD14C\\uC2A4\\uD2B8 \\uCF54\\uB4DC\\uC758 \\uD544\\uC694\\uC131\\uC744 \\uB290\\uB07C\\uAC8C \\uB418\\uC5C8\\uC2B5\\uB2C8\\uB2E4.\"}),`\n`,(0,e.jsx)(\"br\",{}),`\n`,(0,e.jsxs)(n.p,{children:[\"\\uC18C\\uD504\\uD2B8\\uC6E8\\uC5B4 \\uAC1C\\uBC1C \\uBC29\\uBC95\\uB860 \\uC911 \\uD558\\uB098\\uC778 \",(0,e.jsx)(n.code,{children:\"TDD(\\uD14C\\uC2A4\\uD2B8 \\uC8FC\\uB3C4 \\uAC1C\\uBC1C)\"}),\"\\uC5D0\\uB294 \\uC6B0\\uC120\\uC801\\uC73C\\uB85C \\uD14C\\uC2A4\\uD2B8 \\uCF54\\uB4DC\\uB97C \\uC791\\uC131\\uD558\\uACE0 \\uAE30\\uB2A5\\uC744 \\uB9CC\\uB4E4\\uB77C\\uACE0 \\uB418\\uC5B4\\uC788\\uC2B5\\uB2C8\\uB2E4.\"]}),`\n`,(0,e.jsx)(\"br\",{}),`\n`,(0,e.jsx)(n.p,{children:\"\\uC2E4\\uC81C\\uB85C A \\uAE30\\uB2A5\\uC5D0 \\uB300\\uD55C \\uCF54\\uB4DC\\uC640 A \\uAE30\\uB2A5 \\uD14C\\uC2A4\\uD2B8 \\uCF54\\uB4DC\\uB97C \\uC791\\uC131\\uD558\\uAC8C \\uB418\\uBA74 2\\uBC30\\uB85C \\uCF54\\uB4DC\\uB97C \\uC791\\uC131\\uD558\\uB294 \\uC2DC\\uAC04\\uC774 \\uB4DC\\uB294\\uAC74 \\uB9DE\\uC9C0\\uB9CC, \\uC2E4\\uC81C \\uD14C\\uC2A4\\uD2B8 \\uC2DC\\uAC04, \\uB098\\uC911\\uC5D0 \\uBC84\\uADF8\\uB85C \\uC778\\uD55C \\uC0AC\\uC774\\uB4DC \\uC774\\uD399\\uD2B8\\uB97C \\uD574\\uACB0\\uD560 \\uC2DC\\uAC04\\uC744 \\uC0DD\\uAC01\\uD558\\uBA74 \\uC5B4\\uCA4C\\uBA74 \\uC2DC\\uAC04\\uC744 \\uB354 \\uC808\\uC57D\\uD560 \\uC218 \\uC788\\uC2B5\\uB2C8\\uB2E4.\"}),`\n`,(0,e.jsx)(\"br\",{}),`\n`,(0,e.jsx)(n.p,{children:`\\uB610\\uD55C \\uB9CC\\uC57D \\uB2E4\\uB978 \\uD300\\uC6D0\\uC774 \\uC791\\uC5C5\\uD55C \\uCF54\\uB4DC\\uB97C \\uBCF5\\uC7A1\\uD55C \\uCF54\\uB4DC\\uB97C \\uBCFC \\uB54C, \\uD14C\\uC2A4\\uD2B8 \\uCF54\\uB4DC\\uB97C \\uB530\\uB77C\\uAC00\\uB2E4\\uBCF4\\uBA74, \\uD300\\uC6D0\\uC774 \\uC791\\uC131\\uD55C \\uCF54\\uB4DC\\uC758 \\uAE30\\uB2A5\\uC744 \\uD30C\\uC545\\uD558\\uAE30 \\uC6A9\\uC774\\uD569\\uB2C8\\uB2E4.\n\\uC774\\uC81C \\uD14C\\uC2A4\\uD2B8 \\uCF54\\uB4DC\\uB97C \\uC791\\uC131\\uD574\\uC57C\\uD558\\uB294 \\uC774\\uC720\\uB97C \\uC54C\\uAC8C \\uB410\\uC73C\\uB2C8, \\uC5B4\\uB5A4 \\uB3C4\\uAD6C\\uB97C \\uC368\\uC57C\\uD560\\uAE4C\\uC694?`}),`\n`,(0,e.jsx)(n.h3,{children:\"Vitest vs Jest\"}),`\n`,(0,e.jsxs)(n.ul,{children:[`\n`,(0,e.jsxs)(n.li,{children:[`\n`,(0,e.jsx)(n.p,{children:\"\\uC131\\uB2A5: Vitest\\uB294 Vite\\uC758 \\uBE60\\uB978 \\uBE4C\\uB4DC \\uC18D\\uB3C4\\uC640 HMR \\uAE30\\uB2A5\\uC744 \\uD65C\\uC6A9\\uD558\\uC5EC Jest\\uBCF4\\uB2E4 \\uBE60\\uB978 \\uD14C\\uC2A4\\uD2B8 \\uC2E4\\uD589 \\uC18D\\uB3C4\\uB97C \\uC81C\\uACF5\\uD569\\uB2C8\\uB2E4.\"}),`\n`]}),`\n`,(0,e.jsxs)(n.li,{children:[`\n`,(0,e.jsx)(n.p,{children:\"\\uC124\\uC815\\uC758 \\uC6A9\\uC774\\uC131: Vitest\\uB294 Vite\\uC640 \\uC790\\uC5F0\\uC2A4\\uB7FD\\uAC8C \\uD1B5\\uD569\\uB418\\uC5B4 \\uC124\\uC815\\uC774 \\uAC04\\uB2E8\\uD558\\uACE0 \\uC9C1\\uAD00\\uC801\\uC785\\uB2C8\\uB2E4.\"}),`\n`]}),`\n`,(0,e.jsxs)(n.li,{children:[`\n`,(0,e.jsx)(n.p,{children:\"\\uD638\\uD658\\uC131: Vitest\\uB294 Jest\\uC640 \\uC720\\uC0AC\\uD55C API\\uB97C \\uC81C\\uACF5\\uD558\\uC5EC \\uAE30\\uC874 Jest \\uC0AC\\uC6A9\\uC790\\uAC00 \\uC27D\\uAC8C \\uC804\\uD658\\uD560 \\uC218 \\uC788\\uC2B5\\uB2C8\\uB2E4.\"}),`\n`]}),`\n`]}),`\n`,(0,e.jsx)(n.h3,{children:\"\\uC65C Vitest?\"}),`\n`,(0,e.jsxs)(n.ul,{children:[`\n`,(0,e.jsxs)(n.li,{children:[`\n`,(0,e.jsx)(n.p,{children:\"\\uBE60\\uB978 \\uAC1C\\uBC1C \\uD658\\uACBD: Vite\\uC758 \\uC131\\uB2A5\\uC744 \\uD65C\\uC6A9\\uD558\\uC5EC \\uB9E4\\uC6B0 \\uBE60\\uB978 \\uD14C\\uC2A4\\uD2B8 \\uC2E4\\uD589 \\uC18D\\uB3C4\\uB97C \\uC81C\\uACF5\\uD569\\uB2C8\\uB2E4. \\uC774\\uB294 \\uAC1C\\uBC1C\\uC790\\uAC00 \\uCF54\\uB4DC\\uB97C \\uC218\\uC815\\uD558\\uACE0 \\uD14C\\uC2A4\\uD2B8\\uD558\\uB294 \\uACFC\\uC815\\uC5D0\\uC11C \\uC2DC\\uAC04\\uC744 \\uC808\\uC57D\\uD560 \\uC218 \\uC788\\uAC8C \\uD569\\uB2C8\\uB2E4.\"}),`\n`]}),`\n`,(0,e.jsxs)(n.li,{children:[`\n`,(0,e.jsx)(n.p,{children:\"\\uD56B \\uBAA8\\uB4C8 \\uB9AC\\uD50C\\uB808\\uC774\\uC2A4\\uBA3C\\uD2B8 (HMR): Vite\\uC758 HMR \\uAE30\\uB2A5\\uC744 \\uD1B5\\uD574 \\uCF54\\uB4DC \\uBCC0\\uACBD \\uC2DC \\uD14C\\uC2A4\\uD2B8 \\uACB0\\uACFC\\uB97C \\uC989\\uC2DC \\uD655\\uC778\\uD560 \\uC218 \\uC788\\uC5B4 \\uAC1C\\uBC1C \\uD53C\\uB4DC\\uBC31 \\uB8E8\\uD504\\uAC00 \\uC9E7\\uC544\\uC9D1\\uB2C8\\uB2E4.\"}),`\n`]}),`\n`,(0,e.jsxs)(n.li,{children:[`\n`,(0,e.jsx)(n.p,{children:\"\\uAC04\\uD3B8\\uD55C \\uC124\\uC815: Vitest\\uB294 Vite \\uD504\\uB85C\\uC81D\\uD2B8\\uC640 \\uC790\\uC5F0\\uC2A4\\uB7FD\\uAC8C \\uD1B5\\uD569\\uB418\\uC5B4 \\uC124\\uC815\\uC774 \\uAC04\\uB2E8\\uD558\\uACE0 \\uC9C1\\uAD00\\uC801\\uC785\\uB2C8\\uB2E4. \\uC774\\uB294 \\uC124\\uC815 \\uC791\\uC5C5\\uC5D0 \\uC18C\\uC694\\uB418\\uB294 \\uC2DC\\uAC04\\uC744 \\uC904\\uC774\\uACE0, \\uB354 \\uB9CE\\uC740 \\uC2DC\\uAC04\\uC744 \\uC2E4\\uC81C \\uAC1C\\uBC1C\\uC5D0 \\uC9D1\\uC911\\uD560 \\uC218 \\uC788\\uAC8C \\uD569\\uB2C8\\uB2E4.\"}),`\n`]}),`\n`,(0,e.jsxs)(n.li,{children:[`\n`,(0,e.jsx)(n.p,{children:\"\\uBAA8\\uB358 \\uD504\\uB808\\uC784\\uC6CC\\uD06C\\uC640\\uC758 \\uD638\\uD658\\uC131: Vitest\\uB294 TypeScript, JSX, Vue, React \\uB4F1 \\uCD5C\\uC2E0 \\uD504\\uB808\\uC784\\uC6CC\\uD06C \\uBC0F \\uB77C\\uC774\\uBE0C\\uB7EC\\uB9AC\\uC640\\uC758 \\uD638\\uD658\\uC131\\uC774 \\uB6F0\\uC5B4\\uB098, \\uBAA8\\uB358 \\uC6F9 \\uAC1C\\uBC1C \\uD658\\uACBD\\uC5D0 \\uC801\\uD569\\uD569\\uB2C8\\uB2E4.\"}),`\n`]}),`\n`,(0,e.jsxs)(n.li,{children:[`\n`,(0,e.jsx)(n.p,{children:\"Jest\\uC640 \\uC720\\uC0AC\\uD55C API: Vitest\\uB294 Jest\\uC640 \\uB9E4\\uC6B0 \\uC720\\uC0AC\\uD55C API\\uB97C \\uC81C\\uACF5\\uD558\\uC5EC, \\uAE30\\uC874 Jest \\uC0AC\\uC6A9\\uC790\\uB4E4\\uC774 \\uC27D\\uAC8C \\uC804\\uD658\\uD560 \\uC218 \\uC788\\uC2B5\\uB2C8\\uB2E4. \\uC774\\uB294 \\uD559\\uC2B5 \\uACE1\\uC120\\uC744 \\uB0AE\\uCD94\\uACE0, \\uBE60\\uB974\\uAC8C Vitest\\uB97C \\uB3C4\\uC785\\uD560 \\uC218 \\uC788\\uAC8C \\uD569\\uB2C8\\uB2E4\"}),`\n`]}),`\n`]}),`\n`,(0,e.jsx)(n.h3,{children:\"vitest\\uB85C \\uD14C\\uC2A4\\uD2B8 \\uCF54\\uB4DC \\uC791\\uC131\\uD558\\uAE30\"}),`\n`,(0,e.jsx)(n.h4,{children:\"\\uAE30\\uBCF8\\uC801\\uC778 \\uD14C\\uC2A4\\uD2B8 \\uC791\\uC131\\uBC95\"}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-js\",children:`import { describe, it, expect } from 'vitest';\n\ndescribe('\\uB354\\uD558\\uAE30 \\uD568\\uC218 \\uD14C\\uC2A4\\uD2B8', () => {\n  it('\\uB450 \\uC22B\\uC790\\uB97C \\uB367\\uC148\\uD569\\uB2C8\\uB2E4', () => {\n    const sum = (a, b) => a + b;\n    expect(sum(1, 2)).toBe(3);\n  });\n});\n`})}),`\n`,(0,e.jsx)(n.h4,{children:\"\\uBE44\\uB3D9\\uAE30 \\uCF54\\uB4DC \\uD14C\\uC2A4\\uD2B8\"}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-js\",children:`import { describe, it, expect } from 'vitest';\n\ndescribe('API \\uC751\\uB2F5 \\uD14C\\uC2A4\\uD2B8', () => {\n  it('\\uB370\\uC774\\uD130\\uB97C \\uBC1B\\uC544\\uC628\\uB2E4', async () => {\n    const fetchData = () => Promise.resolve('data');\n    const data = await fetchData();\n    expect(data).toBe('data');\n  });\n});\n`})}),`\n`,(0,e.jsx)(n.h4,{children:\"React \\uCEF4\\uD3EC\\uB10C\\uD2B8 \\uD14C\\uC2A4\\uD2B8\\uCF54\\uB4DC\"}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-js\",children:`// Counter.jsx\nimport React, { useState } from 'react';\n\nfunction Counter() {\n  const [count, setCount] = useState(0);\n\n  return (\n    <div>\n      <p data-testid=\"count\">{count}</p>\n      <button onClick={() => setCount(count + 1)}>Increment</button>\n      <button onClick={() => setCount(count - 1)}>Decrement</button>\n    </div>\n  );\n}\nexport default Counter;\n`})}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-js\",children:`import { render, screen, fireEvent } from '@testing-library/react';\nimport { describe, it, expect } from 'vitest';\nimport Counter from './Counter';\n\ndescribe('Counter Component', () => {\n  it('\\uCD08\\uAE30 \\uCE74\\uC6B4\\uD2B8\\uB97C \\uB80C\\uB354\\uB9C1\\uD55C\\uB2E4', () => {\n    render(<Counter />);\n    const countElement = screen.getByTestId('count');\n    expect(countElement.textContent).toBe('0');\n  });\n\n  it('\\uCE74\\uC6B4\\uD2B8\\uB97C \\uC99D\\uAC00\\uC2DC\\uD0A8\\uB2E4', () => {\n    render(<Counter />);\n    const countElement = screen.getByTestId('count');\n    const incrementButton = screen.getByText('Increment');\n\n    fireEvent.click(incrementButton);\n    expect(countElement.textContent).toBe('1');\n  });\n\n  it('\\uCE74\\uC6B4\\uD2B8\\uB97C \\uAC10\\uC18C\\uC2DC\\uD0A8\\uB2E4', () => {\n    render(<Counter />);\n    const countElement = screen.getByTestId('count');\n    const decrementButton = screen.getByText('Decrement');\n\n    fireEvent.click(decrementButton);\n    expect(countElement.textContent).toBe('-1');\n  });\n});\n`})}),`\n`,(0,e.jsx)(n.h4,{children:\"\\uD14C\\uC2A4\\uD2B8 \\uCF54\\uB4DC \\uC791\\uC131 \\uD301\"}),`\n`,(0,e.jsx)(n.p,{children:(0,e.jsx)(n.strong,{children:\"\\uC7AC\\uC0AC\\uC6A9 \\uAC00\\uB2A5\\uD55C \\uD14C\\uC2A4\\uD2B8 \\uC720\\uD2F8\\uB9AC\\uD2F0 \\uD568\\uC218\"})}),`\n`,(0,e.jsx)(n.p,{children:\"\\uBC18\\uBCF5\\uC801\\uC778 \\uD14C\\uC2A4\\uD2B8 \\uCF54\\uB4DC\\uB97C \\uC904\\uC774\\uAE30 \\uC704\\uD574 \\uC720\\uD2F8\\uB9AC\\uD2F0 \\uD568\\uC218\\uB97C \\uC791\\uC131\\uD569\\uB2C8\\uB2E4.\"}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-js\",children:`export const complexCalculation = (a, b) => {\n  return (a * b) / (a - b);\n};\n\ndescribe('\\uBCF5\\uC7A1\\uD55C \\uACC4\\uC0B0', () => {\n  it('\\uC815\\uC0C1 \\uC791\\uB3D9 \\uD14C\\uC2A4\\uD2B8', () => {\n    const result = complexCalculation(10, 5);\n    expect(result).toBeCloseTo(2.5);\n  });\n\n  it('0\\uC73C\\uB85C \\uB098\\uB204\\uAE30\\uB97C \\uCC98\\uB9AC\\uD569\\uB2C8\\uB2E4.', () => {\n    const result = complexCalculation(5, 5);\n    expect(result).toBeNaN();\n  });\n});\n`})}),`\n`,(0,e.jsx)(n.p,{children:(0,e.jsx)(n.strong,{children:\"Mock\\uC744 \\uD65C\\uC6A9\\uD55C \\uD14C\\uC2A4\\uD2B8 \\uCF54\\uB4DC\"})}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-js\",children:`/**\n * \\uBAA9 \\uB370\\uC774\\uD130 Fetch \\uD568\\uC218\n * */\nexport const mockFetch = (url, options = {}) => {\n  const { method = 'GET', response, status = 200, headers = {} } = options;\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve({\n        ok: true,\n        status,\n        json: async () => response,\n        headers: new Headers(headers),\n      });\n    }, 100);\n  });\n};\n\nglobal.fetch = vi.fn().mockImplementation(mockFetch);\n\ndescribe('API \\uC751\\uB2F5 \\uD14C\\uC2A4\\uD2B8', () => {\n  it('FETCH \\uC131\\uACF5', async () => {\n    const mockResponse = { data: 'test' };\n    fetch.mockImplementationOnce(() => mockFetch('/api/data', { response: mockResponse }));\n\n    const response = await fetch('/api/data');\n    const data = await response.json();\n\n    expect(data).toEqual(mockResponse);\n    expect(response.ok).toBe(true);\n  });\n});\n`})}),`\n`,(0,e.jsx)(n.h3,{children:\"Tanstack query \\uB370\\uC774\\uD130 Fetch \\uD14C\\uC2A4\\uD2B8 \\uCF54\\uB4DC\"}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-js\",children:`// DataComponent.jsx\nimport React from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport axios from 'axios';\n\nconst fetchData = async () => {\n  const { data } = await axios.get('/api/data');\n  return data;\n};\n\nconst updateData = async (newData) => {\n  const { data } = await axios.put('/api/data', newData);\n  return data;\n};\n\nfunction DataComponent() {\n  const queryClient = useQueryClient();\n\n  const { data, error, isLoading } = useQuery(['data'], fetchData);\n\n  const mutation = useMutation(updateData, {\n    onSuccess: () => {\n      queryClient.invalidateQueries(['data']);\n    },\n  });\n\n  if (isLoading) return <div>Loading...</div>;\n  if (error) return <div>Error: {error.message}</div>;\n\n  return (\n    <div>\n      <h1>Data</h1>\n      <pre>{JSON.stringify(data, null, 2)}</pre>\n      <button onClick={() => mutation.mutate({ newData: 'Updated data' })}>Update Data</button>\n    </div>\n  );\n}\n\nexport default DataComponent;\n`})}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-js\",children:`// DataComponent.test.jsx\nimport { render, screen, waitFor, fireEvent } from '@testing-library/react';\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\nimport { describe, it, expect, vi } from 'vitest';\nimport axios from 'axios';\nimport DataComponent from './DataComponent';\n\n// axios Mock \\uC124\\uC815\nvi.mock('axios');\n\n// mock \\uB370\\uC774\\uD130\nconst mockData = { data: 'test data' };\nconst updatedData = { data: 'Updated data' };\n\nconst queryClient = new QueryClient();\n\ndescribe('DataComponent', () => {\n  it('\\uB370\\uC774\\uD130\\uB97C \\uAC00\\uC838\\uC640\\uC11C \\uD654\\uBA74\\uC5D0 \\uD45C\\uC2DC\\uD55C\\uB2E4', async () => {\n    axios.get.mockResolvedValueOnce({ data: mockData });\n    // mockResolvedValueOnce\\uB780 mock \\uD568\\uC218\\uAC00 \\uD55C \\uBC88 \\uD638\\uCD9C\\uB420 \\uB54C \\uC9C0\\uC815\\uB41C \\uAC12\\uC744 \\uBC18\\uD658\\uD558\\uB3C4\\uB85D \\uC124\\uC815\\uD558\\uB294 \\uBA54\\uC11C\\uB4DC\n    render(\n      <QueryClientProvider client={queryClient}>\n        <DataComponent />\n      </QueryClientProvider>,\n    );\n\n    expect(screen.getByText('Loading...')).toBeInTheDocument();\n\n    await waitFor(() => expect(screen.getByText(/test data/i)).toBeInTheDocument());\n  });\n\n  it('\\uBC84\\uD2BC \\uD074\\uB9AD \\uC2DC \\uB370\\uC774\\uD130\\uB97C \\uC5C5\\uB370\\uC774\\uD2B8\\uD55C\\uB2E4', async () => {\n    axios.get.mockResolvedValueOnce({ data: mockData });\n    axios.put.mockResolvedValueOnce({ data: updatedData });\n\n    render(\n      <QueryClientProvider client={queryClient}>\n        <DataComponent />\n      </QueryClientProvider>,\n    );\n\n    await waitFor(() => expect(screen.getByText(/test data/i)).toBeInTheDocument());\n\n    fireEvent.click(screen.getByText(/Update Data/i));\n\n    await waitFor(() => expect(screen.getByText(/Updated data/i)).toBeInTheDocument());\n  });\n});\n`})}),`\n`,(0,e.jsx)(n.h3,{children:\"\\uCF54\\uB4DC \\uC124\\uBA85\"}),`\n`,(0,e.jsx)(n.h4,{children:\"mock \\uC124\\uC815\"}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-js\",children:`// axios Mock \\uC124\\uC815\nvi.mock('axios');\n\n// mock \\uB370\\uC774\\uD130\nconst mockData = { data: 'test data' };\nconst updatedData = { data: 'Updated data' };\n\nconst queryClient = new QueryClient();\n`})}),`\n`,(0,e.jsxs)(n.blockquote,{children:[`\n`,(0,e.jsxs)(n.p,{children:[\"vi.mock('axios'): axios \\uBAA8\\uB4C8\\uC744 \\uBAA8\\uC758(mock)\\uD558\\uC5EC \\uC2E4\\uC81C \\uB124\\uD2B8\\uC6CC\\uD06C \\uC694\\uCCAD\\uC744 \\uBC29\\uC9C0\\uD569\\uB2C8\\uB2E4. \",(0,e.jsx)(\"br\",{}),`\nmockData\\uC640 updatedData: \\uD14C\\uC2A4\\uD2B8\\uC5D0 \\uC0AC\\uC6A9\\uD560 \\uBAA8\\uC758 \\uB370\\uC774\\uD130\\uC785\\uB2C8\\uB2E4. \\uCCAB \\uBC88\\uC9F8\\uB294 \\uCD08\\uAE30 \\uB370\\uC774\\uD130, \\uB450 \\uBC88\\uC9F8\\uB294 \\uC5C5\\uB370\\uC774\\uD2B8\\uB41C \\uB370\\uC774\\uD130\\uC785\\uB2C8\\uB2E4. `,(0,e.jsx)(\"br\",{}),`\nqueryClient: react-query\\uB97C \\uC0AC\\uC6A9\\uD558\\uB294 \\uCEF4\\uD3EC\\uB10C\\uD2B8\\uC5D0 \\uD544\\uC694\\uD55C QueryClient \\uC778\\uC2A4\\uD134\\uC2A4\\uB97C \\uC0DD\\uC131\\uD569\\uB2C8\\uB2E4.`]}),`\n`]}),`\n`,(0,e.jsx)(n.h4,{children:\"\\uB370\\uC774\\uD130 \\uAC00\\uC838\\uC624\\uAE30\"}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-js\",children:`it('\\uB370\\uC774\\uD130\\uB97C \\uAC00\\uC838\\uC640\\uC11C \\uD654\\uBA74\\uC5D0 \\uD45C\\uC2DC\\uD55C\\uB2E4', async () => {\n  axios.get.mockResolvedValueOnce({ data: mockData });\n  // mockResolvedValueOnce\\uB780 mock \\uD568\\uC218\\uAC00 \\uD55C \\uBC88 \\uD638\\uCD9C\\uB420 \\uB54C \\uC9C0\\uC815\\uB41C \\uAC12\\uC744 \\uBC18\\uD658\\uD558\\uB3C4\\uB85D \\uC124\\uC815\\uD558\\uB294 \\uBA54\\uC11C\\uB4DC\n  render(\n    <QueryClientProvider client={queryClient}>\n      <DataComponent />\n    </QueryClientProvider>,\n  );\n\n  expect(screen.getByText('Loading...')).toBeInTheDocument();\n\n  await waitFor(() => expect(screen.getByText(/test data/i)).toBeInTheDocument());\n});\n`})}),`\n`,(0,e.jsxs)(n.blockquote,{children:[`\n`,(0,e.jsxs)(n.p,{children:[`\\uB85C\\uB529 \\uC0C1\\uD0DC \\uD655\\uC778:\nexpect(screen.getByText('Loading...')).toBeInTheDocument(): \\uCEF4\\uD3EC\\uB10C\\uD2B8\\uAC00 \\uB85C\\uB529 \\uC911\\uC77C \\uB54C \"Loading...\" \\uD14D\\uC2A4\\uD2B8\\uAC00 \\uD654\\uBA74\\uC5D0 \\uD45C\\uC2DC\\uB418\\uB294\\uC9C0 \\uD655\\uC778\\uD569\\uB2C8\\uB2E4. `,(0,e.jsx)(\"br\",{}),\" \",(0,e.jsx)(\"br\",{}),`\n\\uB370\\uC774\\uD130 \\uD655\\uC778: await waitFor(() => expect(screen.getByText(/test data/i)).toBeInTheDocument()): \\uB370\\uC774\\uD130\\uB97C \\uC131\\uACF5\\uC801\\uC73C\\uB85C \\uAC00\\uC838\\uC654\\uC744 \\uB54C, mockData\\uC758 \\uB0B4\\uC6A9\\uC778 \"test data\"\\uAC00 \\uD654\\uBA74\\uC5D0 \\uD45C\\uC2DC\\uB418\\uB294\\uC9C0 \\uD655\\uC778\\uD569\\uB2C8\\uB2E4.`]}),`\n`]}),`\n`,(0,e.jsx)(n.h4,{children:\"\\uB370\\uC774\\uD130 \\uC5C5\\uB370\\uC774\\uD2B8\"}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-js\",children:`it('\\uBC84\\uD2BC \\uD074\\uB9AD \\uC2DC \\uB370\\uC774\\uD130\\uB97C \\uC5C5\\uB370\\uC774\\uD2B8\\uD55C\\uB2E4', async () => {\n  axios.get.mockResolvedValueOnce({ data: mockData });\n  axios.put.mockResolvedValueOnce({ data: updatedData });\n\n  render(\n    <QueryClientProvider client={queryClient}>\n      <DataComponent />\n    </QueryClientProvider>,\n  );\n\n  await waitFor(() => expect(screen.getByText(/test data/i)).toBeInTheDocument());\n\n  fireEvent.click(screen.getByText(/Update Data/i));\n\n  await waitFor(() => expect(screen.getByText(/Updated data/i)).toBeInTheDocument());\n});\n`})}),`\n`,(0,e.jsxs)(n.blockquote,{children:[`\n`,(0,e.jsxs)(n.p,{children:[`\\uCD08\\uAE30 \\uB370\\uC774\\uD130 \\uD655\\uC778:\nawait waitFor(() => expect(screen.getByText(/test data/i)).toBeInTheDocument()): mockData\\uC758 \\uB0B4\\uC6A9\\uC778 \"test data\"\\uAC00 \\uD654\\uBA74\\uC5D0 \\uD45C\\uC2DC\\uB418\\uB294\\uC9C0 \\uD655\\uC778\\uD569\\uB2C8\\uB2E4. `,(0,e.jsx)(\"br\",{}),(0,e.jsx)(\"br\",{}),`\n\\uB370\\uC774\\uD130 \\uC5C5\\uB370\\uC774\\uD2B8:\nfireEvent.click(screen.getByText(/Update Data/i)): \"Update Data\" \\uBC84\\uD2BC\\uC744 \\uD074\\uB9AD\\uD558\\uC5EC \\uB370\\uC774\\uD130\\uB97C \\uC5C5\\uB370\\uC774\\uD2B8\\uD558\\uB294 \\uC774\\uBCA4\\uD2B8\\uB97C \\uBC1C\\uC0DD\\uC2DC\\uD0B5\\uB2C8\\uB2E4.`,(0,e.jsx)(\"br\",{}),(0,e.jsx)(\"br\",{}),`\n\\uC5C5\\uB370\\uC774\\uD2B8\\uB41C \\uB370\\uC774\\uD130 \\uD655\\uC778:\nawait waitFor(() => expect(screen.getByText(/Updated data/i)).toBeInTheDocument()): \\uB370\\uC774\\uD130\\uAC00 \\uC131\\uACF5\\uC801\\uC73C\\uB85C \\uC5C5\\uB370\\uC774\\uD2B8\\uB418\\uC5C8\\uC744 \\uB54C, updatedData\\uC758 \\uB0B4\\uC6A9\\uC778 \"Updated data\"\\uAC00 \\uD654\\uBA74\\uC5D0 \\uD45C\\uC2DC\\uB418\\uB294\\uC9C0 \\uD655\\uC778\\uD569\\uB2C8\\uB2E4.`,(0,e.jsx)(\"br\",{}),(0,e.jsx)(\"br\",{})]}),`\n`]})]})}function v(t={}){let{wrapper:n}=t.components||{};return n?(0,e.jsx)(n,Object.assign({},t,{children:(0,e.jsx)(l,t)})):l(t)}var b=v;return C(B);})();\n;return Component;"
  },
  "_id": "39.md",
  "_raw": {
    "sourceFilePath": "39.md",
    "sourceFileName": "39.md",
    "sourceFileDir": ".",
    "contentType": "markdown",
    "flattenedPath": "39"
  },
  "type": "Post"
}